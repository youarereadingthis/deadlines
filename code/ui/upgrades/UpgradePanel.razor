@using Sandbox;
@using Sandbox.UI;
@using System;
@using System.Collections.Generic;
@using System.Linq;

@namespace DeadLines
@inherits Panel
@attribute [StyleSheet]

<root>
    <div class="modal">
        <div class="upgradePanelHeader">
            <div class="headerList">
                <label class="title">Shop</label>
                <label>Players ready: @(DeadLines.Manager.ReadyPlayers)/@(Game.Clients.Count())</label>
            </div>
        </div>

        <div class="upgradePanelBody">
            <div class="shopGroup">
                @{
                    var upgrades = Upgrades;
                    @if (upgrades.Count() > 0)
                    {
                        <label class="upgradesHeader">Upgrades</label>
                        <label class="pointsLeft">Upgrade points left: @(Pawn?.UpgradePoints ?? 0)</label>
                        <div class="upgrades">
                        @foreach(var upgrade in upgrades)
                        {
                            <StatUpgrade StatPropName=@upgrade.Key StatDescription=@upgrade.Desc UpgradeableEnt=@upgrade.UpgradeableEnt />
                        }
                        </div>
                    } else
                    {
                        <label class="upgradesHeader">No upgrades available</label>
                    }
                }
            </div>

            <div class="shopGroup">
                <div class="itemsHeaderList">
                    <label class="upgradesHeader">Items</label>
                </div>
                <div class="upgrades">
                    @{
                        foreach(var item in Pawn.AvailableItems)
                        {
                            <ShopItem ItemTypeName=@item></ShopItem>
                        }
                    }
                </div>
                <div class="pickone">
                    <label>(pick one)</label>
                </div>
            </div>
        </div>

        <div class="upgradePanelFooter">
            <div class="button nolabelstyle ready" onclick=@Ready>
                <div class="materialicon" @ref="ReadyCheck">check</div> Ready
            </div>
        </div>
    </div>
</root>

@code
{
    public Pawn Pawn => Game.LocalPawn as Pawn;
    public Panel ReadyCheck { get; set; }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        BindClass("hidden", () => !(Pawn?.IsUpgradePanelOpen ?? false));
        ReadyCheck.BindClass("unchecked", () => !(Pawn?.Ready ?? false));
    }

    public List<(string Key, StatDescription Desc, object UpgradeableEnt)> Upgrades
    {
        get
        {
            var available = Pawn.AvailableUpgrades.Select(x =>
            {
                Pawn.StatDescriptions.TryGetValue(x, out var desc);
                return (Key: x, Desc: desc, UpgradeableEnt: (object)Pawn);
            }).ToList();

            foreach (var comp in Pawn.Components.GetAll<PowerupComponent>())
            {
                var cUpgrade = comp.AvailableUpgrades.Select(x => (Key: x, Desc: comp.StatDescriptions[x], UpgradeableEnt: (object)comp));
                available.AddRange(cUpgrade);
            }

            return available;
        }
    }

    public void Ready(PanelEvent e)
    {
        Pawn.ReadyCmd();
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(
            Pawn?.IsUpgradePanelOpen,
            Pawn?.UpgradePoints,
            DeadLines.Manager.ReadyPlayers
        );
    }
}
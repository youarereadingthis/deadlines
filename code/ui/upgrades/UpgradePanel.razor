@using Sandbox;
@using Sandbox.UI;
@using System;
@using System.Linq;

@namespace DeadLines
@inherits Panel
@attribute [StyleSheet]

<root>
    <div class="modal">
        <div class="upgradePanelHeader">
            <label>Upgrades</label>
            <label>Upgrade Time Left: @TimeLeftString</label>
            <label>Points Left: @(Pawn?.UpgradePoints ?? 0)</label>
        </div>

        <div class="upgradePanelBody">
            @{
                var available = Pawn.AvailableUpgrades.Select(x => (Key: x, Desc: Pawn.StatDescriptions[x]));
                foreach(var pair in available.OrderBy(pair => pair.Desc.ShopOrder))
                {
                    <StatUpgrade StatPropName=@pair.Key Title=@pair.Desc.Name UpgradeableEnt=@Pawn />
                }
                foreach(var comp in Pawn.Components.GetAll<PowerupComponent>())
                {
                    var cAvailable = comp.AvailableUpgrades.Select(x => (Key: x, Desc: comp.StatDescriptions[x]));
                    foreach (var pair in cAvailable.OrderBy(pair => pair.Desc.ShopOrder))
                    {
                        <StatUpgrade StatPropName=@pair.Key Title=@pair.Desc.Name UpgradeableEnt=@comp />
                    }
                }
            }
        </div>

        <div class="upgradePanelFooter">
            <button class="close" Text="Close" onclick=@CloseUpgradeScreen></button>
        </div>
    </div>
</root>

@code
{
    public Pawn Pawn => Game.LocalPawn as Pawn;
    public string TimeLeftString => @DeadLines.Manager.NextWave.Relative.ToString("0");

    public UpgradePanel()
    {
        BindClass("hidden", () => !(Pawn?.IsUpgradePanelOpen ?? false));
    }

    public void CloseUpgradeScreen(PanelEvent e)
    {
        Pawn.HideUpgradeScreenCmd();
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Pawn?.IsUpgradePanelOpen, Pawn?.UpgradePoints, TimeLeftString);
    }
}
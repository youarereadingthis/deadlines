@using Sandbox;
@using Sandbox.UI;
@using System;
@using System.Linq;

@namespace DeadLines
@inherits Panel
@attribute [StyleSheet]

<root>
    <div class="modal">
        <div class="upgradePanelHeader">
            <div class="headerList">
                <label class="title">Shop</label>
                <label>Players ready: @(DeadLines.Manager.ReadyPlayers)/@(Game.Clients.Count())</label>
            </div>
        </div>

        <div class="upgradePanelBody">
            <div class="shopGroup">
                <label class="upgradesHeader">Upgrades</label>
                <label class="pointsLeft">Points Left: @(Pawn?.UpgradePoints ?? 0)</label>
                <div class="upgrades">
                @{

                    var available = Pawn.AvailableUpgrades.Select(x => {
                        Pawn.StatDescriptions.TryGetValue(x, out var desc);
                        return (Key: x, Desc: desc);
                    });
                    foreach(var pair in available)
                    {
                        <StatUpgrade StatPropName=@pair.Key StatDescription=@pair.Desc UpgradeableEnt=@Pawn />
                    }
                    foreach(var comp in Pawn.Components.GetAll<PowerupComponent>())
                    {
                        var cAvailable = comp.AvailableUpgrades.Select(x => (Key: x, Desc: comp.StatDescriptions[x]));
                        foreach (var pair in cAvailable)
                        {
                            <StatUpgrade StatPropName=@pair.Key StatDescription=@pair.Desc UpgradeableEnt=@comp />
                        }
                    }
                }
                </div>
            </div>

            <div class="shopGroup">
                <label class="upgradesHeader">Items</label>
                <div class="upgrades">
                    @{
                        foreach(var item in Pawn.AvailableItems)
                        {
                            <ShopItem ItemTypeName=@item></ShopItem>
                        }
                    }
                </div>
            </div>
        </div>

        <div class="upgradePanelFooter">
            <div class="button nolabelstyle ready" onclick=@Ready>
                <div class="materialicon" @ref="ReadyCheck">check</div> Ready
            </div>
        </div>
    </div>
</root>

@code
{
    public Pawn Pawn => Game.LocalPawn as Pawn;
    public Panel ReadyCheck { get; set; }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        BindClass("hidden", () => !(Pawn?.IsUpgradePanelOpen ?? false));
        ReadyCheck.BindClass("unchecked", () => !(Pawn?.Ready ?? false));
    }

    public void Ready(PanelEvent e)
    {
        Pawn.ReadyCmd();
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(
            Pawn?.IsUpgradePanelOpen,
            Pawn?.UpgradePoints,
            DeadLines.Manager.ReadyPlayers
        );
    }
}
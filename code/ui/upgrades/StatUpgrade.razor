@using Sandbox;
@using Sandbox.UI;
@using System;
@using System.Collections.Generic;

@namespace DeadLines
@inherits Panel
@attribute [StyleSheet]

<root>
    <div class="upgradeText">
        <label>@(PowerupTitle ?? Title):</label>
        <label>@Value</label>
    </div>
    <button Text="+" onclick=@AddUpgrade></button>
</root>

@code
{
    // A Pawn or a PowerupComponent
    public object UpgradeableEnt { get; set; }

    private string _statPropName;
    public string StatPropName {
        get
        {
            return _statPropName;
        }
        set
        {
            _statPropName = value;
            if (_statPropName.StartsWith("Powerup-"))
            {
                var type = TypeLibrary.GetType(_statPropName.Substring("Powerup-".Length));
                var displayInfo = DisplayInfo.ForType(type.TargetType);
                PowerupTitle = displayInfo.Name;
                if (PowerupTitle.EndsWith(" Component"))
                    PowerupTitle = PowerupTitle.Substring(0, PowerupTitle.Length - " Component".Length);
            }
        }
    }

    public string Title { get; set; }
    public string PowerupTitle { get; set; }
    public string Value {
        get
        {
            if (PowerupTitle != null)
                return "-";

            IDictionary<string, int> upgrades = null;
            if (UpgradeableEnt is Pawn pawn)
                upgrades = pawn.Upgrades;
            if (UpgradeableEnt is PowerupComponent comp)
                upgrades = comp.Upgrades;

            if (upgrades == null)
                return "0";

            upgrades.TryGetValue(StatPropName, out var statUpgradePoints);
            return statUpgradePoints.ToString();
        }
    }

    public void AddUpgrade()
    {
        if (UpgradeableEnt is Pawn pawn)
            Pawn.AddPawnUpgradeCmd(StatPropName);
        if (UpgradeableEnt is PowerupComponent comp)
            PowerupComponent.AddPowerupUpgradeCmd( comp.GetType().ToString(), StatPropName);
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Value);
    }
}